Thimbles:
- Initial thought: The problem requires determining the position of the ball after a series of swaps between thimbles. My initial thought is to initialize the ball's position as 1 (as stated as the problem's rule) and iterate through the swap operations. For each swap, I convert the number string to integer and check if the ball is under one of the swapped thimbles and, if so, update its position accordingly. The approach is straightforward, and I will use a simple loop to process the swaps.
- Reflections: The code worked as expected, and the ball's final position was correctly determined in all test cases. The logic is simple, and by iterating through each swap, I ensured that the solution efficiently handles the problem. Overall, I'm happy with the readability and performance of my solution.

MatchNumbersEasy
- Initial thought: I got a bit confused when I first read the rules of the problem. But I eventually figured it out after a while of reading. The problem requires constructing the largest possible number using a given number of matches, with each digit consuming a different number of matches. For a suitable way of implementing the rules, it was really tricky for me at first. My first thought is to use dynamic programming (DP) to compute the largest number that can be formed for each possible number of matches from 0 to n. The idea is to build the result iteratively, considering each digit and how many matches it consumes, ensuring that we maximize the result at each step by comparing potential numbers.
- Reflections: I got a bit irritated when it comes to some cases when the program just wanna use all the matches and doesn't address to largest possible digit, leading to returning only zeroes results. I fixed the case eventually. Anyway, the DP approach worked as expected, and the solution was able to construct the correct largest number in all test cases. I'm not really sure about the readability of the codes as it may varies among readers, but for now, I'm good with the current layout of the codes.